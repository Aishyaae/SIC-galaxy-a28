#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#define RXD2 16
#define TXD2 17
#define SEALEVELPRESSURE_HPA (1013.25)
//Adafruit_BME680 bme; // I2C
#define ON_Board_LED 2 //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

const char* ssid = "Banana"; //--> Your wifi name or SSID.
const char* password = "kleinmoretti"; //--> Your wifi password.

//----------------------------------------Host & httpsPort
const char* host = "script.google.com";
const int httpsPort = 443;
//----------------------------------------

WiFiClientSecure client; //--> Create a WiFiClientSecure object.

String GAS_ID = "AKfycbxLQVGNyZ-iZbhOzivTmZfwdWxaD_eo8cSHsvHqdP0N8OoOEretmS_F60e8iVcUGA3Z"; //--> spreadsheet script ID

void setup() {
 // put your setup code here, to run once:
 Serial.begin(115200);
 Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
 delay(500);
 WiFi.begin(ssid, password); //--> Connect to your WiFi router
 Serial.println("");
 pinMode(ON_Board_LED,OUTPUT); //--> On Board LED port Direction output
 digitalWrite(ON_Board_LED, HIGH); //--> Turn off Led On Board
 //----------------------------------------Wait for connection
 Serial.print("Connecting");
 while (WiFi.status() != WL_CONNECTED) {
 Serial.print(".");
 //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
 digitalWrite(ON_Board_LED, LOW);
 delay(250);
 digitalWrite(ON_Board_LED, HIGH);
 delay(250);
 //----------------------------------------
 }
 //----------------------------------------
 digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
 Serial.println("");
 Serial.print("Successfully connected to : ");
 Serial.println(ssid);
 Serial.print("IP address: ");
 Serial.println(WiFi.localIP());
 Serial.println();
 //----------------------------------------

// while (!Serial);
// Serial.println(F("BME680 test"));
// if (!bme.begin()) {
// Serial.println("Could not find a valid BME680 sensor, check wiring!");
// while (1);
// }
// // Set up oversampling and filter initialization
// bme.setTemperatureOversampling(BME680_OS_8X);
// bme.setHumidityOversampling(BME680_OS_2X);
// bme.setPressureOversampling(BME680_OS_4X);
// bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
// bme.setGasHeater(320, 150); // 320*C for 150 ms
 client.setInsecure();
}

void loop() {
  Serial.print("Data Received: ");
  Serial.println(Serial2.readString());
 // Reading temperature or humidity takes about 250 milliseconds!
 // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
// if (! bme.performReading()) {
// Serial.println("Failed to perform reading :(");
// return;
// }
// Serial.print("Temperature = ");
// Serial.print(bme.temperature);
// Serial.println(" *C");
// Serial.print("Pressure = ");
// Serial.print(bme.pressure / 100.0);
// Serial.println(" hPa");
// Serial.print("Humidity = ");
// Serial.print(bme.humidity);
// Serial.println(" %");
// Serial.print("Gas = ");
// Serial.print(bme.gas_resistance / 1000.0);
// Serial.println(" KOhms");
//
// Serial.print("Approx. Altitude = ");
// Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
// Serial.println(" m");
// Serial.println();
//int h = bme.humidity;
//// float t = bme.temperature;
 sendData(Serial2.readString()); //--> Calls the sendData Subroutine
}

// Subroutine for sending data to Google Sheets
void sendData(String) {
 Serial.println("==========");
 Serial.print("connecting to ");
 Serial.println(host); 
 //----------------------------------------Connect to Google host
 if (!client.connect(host, httpsPort)) {
 Serial.println("connection failed");
 return;
 }
 //----------------------------------------

 //----------------------------------------Processing data and sending data
 String string_data = String(Serial2.readString());
 // String string_temperature = String(tem, DEC); 
// String string_humidity = String(hum, DEC); 
 String url = "/macros/s/" + GAS_ID + "/exec?temperature=" + string_data;
 Serial.print("requesting URL: ");
 Serial.println(url);

 client.print(String("GET ") + url + " HTTP/1.1\r\n" +
 "Host: " + host + "\r\n" +
 "User-Agent: BuildFailureDetectorESP32 \r\n" +
 "Connection: close\r\n\r\n");

 Serial.println("request sent");
 //----------------------------------------

 //----------------------------------------Checking whether the data was sent successfully or not
 while (client.connected()) {
 String line = client.readStringUntil('\n');
 if (line == "\r") {
 Serial.println("headers received");
 break;
 }
 }
 String line = client.readStringUntil('\n');
 if (line.startsWith("{\"state\":\"success\"")) {
 Serial.println("ESP32 /Arduino CI successfull!");
 } else {
 Serial.println("ESP32 /Arduino CI has failed");
 }
 Serial.print("reply was : ");
 Serial.println(line);
 Serial.println("closing connection");
 Serial.println("==========");
 Serial.println();
}
